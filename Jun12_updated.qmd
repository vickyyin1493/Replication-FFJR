**Introduction**

Overall, we attempted to replicate the study conducted by @Fama:1969wc concerning whether there is unusual behaviour in a stock's returns following a stock split and the relationship between stock splits and dividends, as dividend announcements typically follow a large portion of stock splits in the past @Fama:1969wc. However, we have extended the original replication to utilise more recent data (from 1990 to 2022) and daily data, which can be identified as extensions beyond the original @Fama:1969wc study, which used monthly data, and the data ranged from 1926 to 1960 @Fama:1969wc.  These changes were implemented as we would like to identify whether the results from @Fama:1969wc would still hold in a contemporary market and determine whether there are new theories concerning stock splits compared to the 1970s. Moreover, we have also utilised the actual announcement dates as this was only estimated by @Fama:1969wc, and we have decided to refine this and use announcement dates that are currently available to extend the results obtained in @Fama:1969wc. However, we continued to observe stocks listed on the New York Stock Exchange (NYSE) to more closely follow the approach @Fama:1969wc took at the time, but in a contemporary setting, utilising daily data and announcement dates.

Regarding the pivotal theories at the time, @Fama:1969wc analysed several theories that provided a crucial foundation for our analysis and explanation of subsequent results. During our seminar on @Fama:1969wc, it was divulged that the following hypotheses were proposed and considered possible reasons for the graphs displayed in the paper: 

**Theory A:** Firms like to keep their stock price within certain bounds. When the stock price rises above a certain threshold, a firm may initiate a split, announcing it several weeks in advance of its effective date.
**Theory B:** Firms use splits to signal private information about firm prospects. A firm will announce a split several weeks in advance of its effective date. 

Specifically, Theory A represents the liquidity hypothesis, where firms tend to utilise stock splits to signal private information on the firm's positive outlook, and Theory B denotes the information signalling hypothesis, where firms attempt to improve the liquidity of their stocks via stock splits. After scrutinising recent literature, we discover these theories remain significant in explaining management's intentions surrounding stock splits. 

The primary replication and dividend analyses below will explain these theories and their applicability to our replication of @Fama:1969wc.

**Main replication of @Fama:1969wc**

We begin by identifying the required libraries to provide the appropriate functions in our @Fama:1969wc replication.

```{r}
#| include: false
#| echo: false
library(DBI)
library(dplyr, warn.conflicts = FALSE)
library(dbplyr)      # For window_order
library(tidyr)       # For nest and unnest
library(purrr)       # For map, map2
library(ggplot2)
library(lubridate)
library(farr)
```

We connect to the CRSP database, which contains prices and returns on all NYSE common stocks, which was the stock exchange utilised by @Fama:1969wc. We load the appropriate tables, which include the relevant announcement dates, splits and unique firm identifiers (permno) required in our subsequent code. Mainly, we utilised data from dsi and dsf, which stand for daily stock index and daily stock file, respectively, as we attempted to replicate @Fama:1969wc by using daily data (also disclosed above). 

We created the "splits" variable, limiting the announcement dates to the appropriate timeframe we are investigating (1990 to 2022) and identifying cases where splits occurred, which is different to the initial timeframe within @Fama:1969wc. The data is sourced from dsedist, a table with information on different stock splits and dividend distributions, which we will use in our replication below. 

We also created the variable "nyse_stocks" given that data on exchcd and shrcd on different dates can be sourced from crsp.stocknames. We continue to utilise "exchcd == 1" because we are restricting the stock splits to NYSE-listed stocks since we continue replicating @Fama:1969wc. 

We then collated the information regarding the stock splits for NYSE stocks and their announcement dates into the "nyse_splits_raw" variable.
```{r}
pg <- dbConnect(RPostgres::Postgres(), bigint = "integer")

rs <- dbExecute(pg, "SET search_path TO crsp")
dsi <- tbl(pg, "dsi")
dsf <- tbl(pg, "dsf")
stocknames <- tbl(pg, "stocknames")
dsedist <- tbl(pg, "dsedist")

splits <-
  dsedist %>%
  filter(dclrdt >= "1990-01-01", dclrdt <= "2022-12-31",
         distcd %in% c(5523L, 5533L),
         facshr >= 0.25) %>%
  mutate(split = TRUE) %>%
  select(permno, split, dclrdt, facshr) 

nyse_stocks <-
  stocknames %>%
  filter(exchcd == 1,
         substr(as.character(shrcd), 1L, 1L) == "1") %>%
  select(permno, namedt, nameenddt) 

nyse_splits_raw <-
  splits %>%
  inner_join(nyse_stocks, by = "permno") %>%
  filter(dclrdt >= namedt, dclrdt <= nameenddt) %>%
  collect() 
```
We now create the variable "day_indexes", which involves information from the daily stock index table, and the index of a day depicts the order and placement in the sequence of days sourced from crsp.dsf and crsp.dsi. Subsequently, we can merge the data from "nyse_splits_raw" and "day_indexes" by day_index. 

Regarding the next step, we had to combine our splits data from "nyse_splits_raw" to our "day_indexes" data by "day". However, during this process, we encountered various issues, including the loss of split data, especially by utilising "inner_join". At first, we attempted to use "left_join", which limited the loss of splits data, but there continued to be 12 splits missing when comparing "nyse_splits_raw" and "nyse_splits". It was later revealed that this was likely due to the problem where the announcement dates (dclrdt) not being in our "day_indexes" variable, which could be due to the announcement of the split occurring on a non-trading date or weekend, and this was not taken into account. To combat this issue, "get_event_dates" was utilised as a function, and it creates a table that maps announcements to trading dates, and subsequently, we no longer encountered missing splits data between "nyse_splits_raw" and "nyse_splits".
```{r}
#| include: false
day_indexes <-
  dsi %>%
  mutate(day = date) %>%
  window_order(day) %>%
  mutate(day_index = row_number()) %>%
  select(date, day, day_index) %>%
  collect() 

nyse_splits <-
  nyse_splits_raw %>%
  get_event_dates(pg, permno = "permno", event_date = "dclrdt") %>%
  inner_join(nyse_splits_raw, by = join_by(permno, dclrdt)) %>%
  select(-namedt, -nameenddt) %>%
  rename(day = start_date) %>%
  select(-end_date) %>%
  inner_join(day_indexes, by = "day") %>%  
  rename(ex_day_index = day_index) %>% 
  select(-date) %>%
  collect()
```
We now create the variable "nyse_dsf", which represents the daily stock file restricted to NYSE stocks filtered for days with non-missing returns, and we joined this with the previous day_indexes variable, by the "date", which is a variable that the daily stock file and day_indexes have in common. 

Afterwards, the variable "split_return_data" is created, which contains day_rel_ex, which measures the number of days between the return and stock split.

Given that @Fama:1969wc looked at the behaviour in returns of securities 12 months before and after the split, which was decided arbitrarily, we decided to look 365 days before and after the stock split in the variable "split_sample" to replicate the approach in @Fama:1969wc best. 

We also attempt to count the number of splits in our sample. Our sample has 2305 splits, which is significantly more than the 940 stock splits within @Fama:1969wc. We suspect this may be due to the nature of exploring daily data instead of monthly data. Moreover, this change could be due to changes in the underlying data and market since the 1970s.
```{r nyse_dsf}
#| include: false
nyse_dsf <-
  dsf %>%
  filter(!is.na(ret)) %>%
  inner_join(nyse_stocks, by = "permno") %>%
  filter(between(date, namedt, nameenddt)) %>%
  collect() %>%
  inner_join(day_indexes, by = "date") %>%
  select(permno, day_index, date, ret) 

split_return_data <-
  nyse_splits %>%
  left_join(nyse_dsf, by = "permno") %>%
  mutate(day_rel_ex = day_index - ex_day_index) %>%
  select(permno, dclrdt, date, ret, day_rel_ex) 

split_sample <-
  split_return_data %>%
  filter(between(day_rel_ex, -365, 365)) %>%
  group_by(permno, dclrdt) %>%
  summarize(n_obs = n(), .groups = "drop") %>% 
  select(permno, dclrdt)

split_returns <-
  split_return_data %>%
  semi_join(split_sample, by = c("permno")) 

split_sample %>% distinct(permno) %>% count()
split_sample %>% count()
```
We continue to focus on vwretd in our analysis and identify it within "index_returns", which stands for the value-weighted return, which involves distributions and weighs each stock within a given portfolio according to their market value when the portfolio is formed. 

We also aim to partially address the worries from @Fama:1969wc about non-zero excess returns, which can lead to errors in specification, leading to the initial paper excluding 15 months before the stock split. In our replication using daily data, we deemed this figure to be 450 days, scaled to approximately 15 months in days (15 months x 30 days).
```{r}
index_returns <-
  dsi %>%
  select(date, vwretd, ewretd) %>%
  collect()

omit_returns <-
  split_returns %>%
  mutate(exclude = between(day_rel_ex, -450, 0)) %>%
  group_by(permno, date) %>%
  summarize(exclude = any(exclude), .groups = "drop")

split_returns_reg <-
  split_returns %>%
  inner_join(omit_returns, by = c("permno", "date")) %>%
  select(permno, date, ret, exclude) %>%
  distinct() 
```
We now estimate regressions and calculate the abnormal returns similarly to @Fama:1969wc. In particular, a market model is estimated by regressing the log of gross returns of each stock on the log of gross returns of a market index before taking the residual, as shown in @Fama:1969wc.
```{r}
#| include: false
abnormal_returns <-
  split_returns_reg %>%
  left_join(index_returns, by = "date") %>%
  mutate(lpr = log(1 + ret),
         lm = log(1 + vwretd)) %>%
  select(permno, date, lpr, lm, exclude) %>%
  nest(data = !permno) %>%
  mutate(fit = map(data, ~ lm(lpr ~ lm, data = ., subset = !exclude,
                              na.action = "na.exclude"))) %>%
  mutate(predicted = map2(fit, data, ~ predict(.x, newdata = .y))) %>%
  unnest(cols = c(predicted, data)) %>%
  mutate(resid = lpr - predicted) %>%
  select(permno, date, resid)
```

We now join abnormal_returns with nyse_splits by their permno after joining with day_indexes by date before filtering for observations more than 365 days before and after the split.
```{r}
table2_data <-
  abnormal_returns %>%
  inner_join(collect(day_indexes), by = "date") %>%
  left_join(nyse_splits, by = "permno") %>%
  mutate(day_gap = day_index - ex_day_index) %>%
  filter(abs(day_gap) <= 365)
```
After calculating the abnormal returns according to the approach in @Fama:1969wc, we can now extend the replication to a critical aspect of the @Fama:1969wc paper, which is essentially Figure 2b. However, a difference between the graph below and Figure 2b in @Fama:1969wc is that this figure outlines the relationship between the cumulative average residuals of all splits but primarily focuses on the announcement date instead of the effective month @Fama:1969wc. The x-axis is in terms of "days" in our replication which is more specific than the month approach by @Fama:1969wc due to the lack of computational abilities at the time. 

Nonetheless, regarding the figure itself, we continue to observe a similar pattern to the Figure 2b in @Fama:1969wc despite the different nature of the dates investigated and the more recent data surrounding stock returns and stock splits used. Specifically, there is an increase in the cumulative average residuals increases significantly leading up to the announcement date of the stock split. Still, this steep increase halts after the announcement date. 

Regarding the theory alignment, it can be identified that @Fama:1969wc primarily argues for Theory B within the paper, where it is mentioned that a proposed split may be utilised as an information source to reduce uncertainty @Fama:1969wc. Again, as revealed in the introduction, this theory aligns more closely with the information signalling hypothesis that firms will disclose information regarding the firm's positive prospects to the market. However, the figure obtained below aligns more closely with Theory A, which denotes the liquidity hypothesis where management utilises stock splits to enhance their stock's liquidity. This can be observed by the increase in stock returns before the stock split announcement, which again infers that firms will implement a stock split when security prices are high, indicated by positive or rising returns. Hence, this shows that the liquidity hypothesis applies to both the market in 1926-1960 and the current market @Fama:1969wc. Furthermore, it can still be deemed that Theory A is the theory that is consistent with the graph pattern observed in comparison to the information signalling hypothesis, denoted by Theory B.
```{r}
table2_data %>%
  group_by(day_gap) %>%
  summarize(all_u = mean(resid), .groups = "drop") %>%
  arrange(day_gap) %>%
  mutate(all_U = cumsum(all_u)) %>%
  ggplot(aes(x = day_gap, y = all_U)) +
  geom_point()
```

# Dividend Analysis

To distinguish theory A (liquidity hypothesis) and theory B (information signalling hypothesis), the addition of analysis concerning the relationship between stock splits and dividends would be significant to analyse. 

From the introduction, Theory B suggests that firms implement stock splits to signal dividend announcements, which may also signal future prospects. This theory has two components: one is that stock splits signal dividends, and another one is that dividends may signal future prospects.
Both components act together and implicitly suggest that the market, aware of firms' signalling rationales, will expect dividends after split announcements.  

In this part of the replication, we tried to observe market reactions for the firms that announced stock splits. By differentiating the firms with 'dividend increases' and 'dividend decreases' post-split announcements, we evaluate theory B through whether market participants would react differently when firms' decisions align/misalign with their expectations. 

Assuming Theory B holds, the market should react positively when splits are first announced and will not react negatively for firms that announced dividend increases but react negatively for firms announcing dividend decreases. This is due to the (assumed) market's expectation that firms that announced stock splits will announce dividend increases (theory B) as they used stock splits as a signalling tool. When the market's expectations are unmet, it will react through negative stock returns.

As firms could pay dividends multiple times per day (although it might be implausible), we followed the approach in the textbook and calculated daily dividend amounts. We then selected NYSE stocks for our purpose of analysis. 

Following @Fama:1969wc, for a given day t, we calculated total dividends paid from day t-364 to day t (div_trailing) and from day t+1 to day t+365 (div_forward). This calculates the 'dividend change ratio' defined in @Fama:1969wc. We followed the approach in the textbook to calculate the total dividend per equivalent unsplit share using cfacshr and treat no dividend as divamt = 0. 

We encountered some problems in specifying meaningful cases. We were deciding whether to follow a similar approach in the textbook and exclude cases where a stock has been listed within the last twelve months or delisted in subsequent months. When we were analysing the distributions of days_trailing and days_forward, which are the numbers of days stock is listed from t-364 to t and from t+1 to t+365, we found that a lot more firms have 365 days before and after compared to any other numbers of days. While it could be problematic to restrict precisely 365 days (as suggested by Ian), it might be a better number to use than others. However, this approach gives us significantly fewer data points than month-based restrictions, while leaving out this restriction may yield a less-meaningful dividend change ratio. We decided to turn to an alternative approach as suggested by Ian and aggregated the data by month before calculating.
```{r}
#| include: false
div_days <-
  dsedist %>%
  filter(substr(as.character(distcd), 1L, 1L) == "1") %>%
  mutate(day =  dclrdt) %>%
  group_by(permno, day) %>%
  summarize(divamt = sum(divamt, na.rm = TRUE), .groups = "drop")

nyse_divs_raw <-
  dsf %>%
  inner_join(nyse_stocks, by = "permno") %>%
  filter(between(date, namedt, nameenddt)) %>%
  mutate(day =  date) %>%
  select(permno, date, day, cfacshr) %>%
  left_join(div_days, by = c("permno", "day")) %>%
  mutate(divamt = coalesce(divamt/cfacshr, 0)) %>%
  select(permno, day, divamt)
```

In the next chunk, we investigated the distribution for days_forward and days_trailing for dividends data to evaluate the suitability of restricting 365 days before and after.
```{r}
 #investigate distribution for days_forward 

nyse_divs_raw %>%   
  group_by(permno) %>%   
  window_order(day) %>%   
  window_frame(from = -364, to = 0) %>%   
  mutate(div_trailing = sum(divamt, na.rm = TRUE),          
         days_trailing = sum(1, na.rm = TRUE)) %>%   
  window_frame(from = 1, to = 365) %>%   
  mutate(div_forward = sum(divamt, na.rm = TRUE),          
         days_forward = sum(1, na.rm = TRUE)) %>%   
  ggplot(aes(days_forward)) +   geom_histogram()

#investigate distribution for days_trailing 

nyse_divs_raw %>%   
  group_by(permno) %>%   
  window_order(day) %>%   
  window_frame(from = -364, to = 0) %>%   
  mutate(div_trailing = sum(divamt, na.rm = TRUE),          
         days_trailing = sum(1, na.rm = TRUE)) %>%   
  window_frame(from = 1, to = 365) %>%   
  mutate(div_forward = sum(divamt, na.rm = TRUE),          
         days_forward = sum(1, na.rm = TRUE)) %>%   
  ggplot(aes(days_trailing)) +   geom_histogram()
```

In the chunk below, we aggregated the data by month, excluded less-meaningful cases and then proceeded by using daily data without filtering to calculate daily dividend amounts.
```{r}
nyse_divs <-
  nyse_divs_raw %>%
  group_by(permno) %>%
  window_order(month) %>%
  window_frame(from = -11, to = 0) %>%
  mutate(mths_trailing = sum(1, na.rm = TRUE)) %>%
  window_frame(from = 1, to = 12) %>%
  mutate(mths_forward = sum(1, na.rm = TRUE)) %>%
  filter(mths_trailing == 12, mths_forward == 12) %>%
  ungroup() %>%
  group_by(permno) %>%
  window_order(day) %>%
  window_frame(from = -364, to = 0) %>%
  mutate(div_trailing = sum(divamt, na.rm = TRUE),
         days_trailing = sum(1, na.rm = TRUE)) %>%
  window_frame(from = 1, to = 365) %>%
  mutate(div_forward = sum(divamt, na.rm = TRUE),
         days_forward = sum(1, na.rm = TRUE)) %>%
  ungroup() %>%
  select(permno, day, div_trailing, div_forward) %>%
  collect()
```

We are interested in the dividends paid by NYSE firms that announced splits. We used full_join here rather than left_join in the initial replication. This is because using left_join would give us substantially fewer data points for split_firm_dividends. Specifically, we will be left with only one split_firm_dividends while full_join gives us all data points. 
However, we will be left with many NA values for dclrdt (announcement dates) using full_join. Luckily, the day column captures the same information and is not lost in the joining process. We then changed the following code to use day instead of dclrdt.
```{r split_firm_dividends}
#| include: false
split_firm_dividends <-
  nyse_splits %>% #day here is the same as dclrdt
  full_join(nyse_divs, by = c("permno", "day")) %>% #day here is dividend date
  mutate(div_ratio = if_else(div_trailing > 0, div_forward/div_trailing,
                             NA_real_)) %>%
  filter(!is.na(div_ratio)) %>%
  select(permno, day, div_ratio) 
```

We also calculated the market dividend change ratio as a benchmark for identifying 'dividend increases'.
'Dividend increases' (up_div) is when the split firm's dividend change ratio is greater than the market dividend change ratio in a given day.
```{r}
#| include: false
div_mkt <- #day here is dividend date
  nyse_divs %>% 
  group_by(day) %>% 
  summarize(div_trailing = mean(div_trailing, na.rm = TRUE),
            div_forward = mean(div_forward, na.rm = TRUE),
            .groups = "drop") %>%
  mutate(mkt_div_ratio = if_else(div_trailing > 0, div_forward/div_trailing,
                                 NA_real_))

dividends_file <-
  split_firm_dividends %>% #day here is the same as dclrdt
  inner_join(div_mkt, by = "day") %>%  #day here is dividend date
  select(permno, day, div_ratio, mkt_div_ratio) %>% 
  mutate(up_div = div_ratio >= mkt_div_ratio)
```

As we named both date and dclrdt as day previously, we wanted to specify a value to use when plotting the dividend data. Here, we used the date to produce an analogue of Figure 3c from @Fama:1969wc.
```{r}
#| include: false
table2_w_divs <- 
  table2_data %>%
  rename(day = day.x) %>%
  left_join(dividends_file, by = c("permno", "day"))
```

```{r}
table2_w_divs %>%
  filter(up_div) %>%
  group_by(day_gap) %>%
  summarize(u = mean(resid), .groups = "drop") %>%
  arrange(day_gap) %>%
  mutate(U = cumsum(u)) %>%
  ggplot(aes(x = day_gap, y = U)) +
  geom_point()
```

And figure 3d from @Fama:1969wc.

```{r}
table2_w_divs %>%
  filter(!up_div) %>%
  group_by(day_gap) %>%
  summarize(u = mean(resid), .groups = "drop") %>%
  arrange(day_gap) %>%
  mutate(U = cumsum(u)) %>%
  ggplot(aes(x = day_gap, y = U)) +
  geom_point()
```

```{r}
table2_w_divs %>%
  filter(!is.na(up_div)) %>%
  count(up_div)
```
