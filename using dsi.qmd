---
title: "FFJR Replication'"
author: Jade & Vicky
format: html
bibliography: book.bib
---

This version of FFJR replication is our "initial data steps" on Financial Accounting Research project. 
We used the codes in the textbook and changed the frequency from monthly to daily data and used announcement 
dates instead of effective dates for stock splits. We restricted the window to be from 1990 - 2022 for our analysis. 
In this version, we used dsi and dsf instead of msi and msf. 

```{r}
#| include: false
library(DBI)
library(dplyr, warn.conflicts = FALSE)
library(dbplyr)      # For window_order
library(tidyr)       # For nest and unnest
library(purrr)       # For map, map2
library(ggplot2)
library(lubridate)
```

## Replication of FFJR

```{r}
#| include: false
pg <- dbConnect(RPostgres::Postgres(), bigint = "integer")

rs <- dbExecute(pg, "SET search_path TO crsp")
msf <- tbl(pg, "msf")
msi <- tbl(pg, "msi")
dsi <- tbl(pg, "dsi")
dsf <- tbl(pg, "msf")
stocknames <- tbl(pg, "stocknames")
dsedist <- tbl(pg, "dsedist")
```

```{r}
#| include: false
splits <-
  dsedist %>%
  filter(dclrdt >= "1990-01-01", dclrdt <= "2022-12-31",
         distcd %in% c(5523L, 5533L),
         facshr >= 0.25) %>%
  mutate(split = TRUE) %>%
  select(permno, split, dclrdt, facshr) 
```


```{r}
#| include: false
nyse_stocks <-
  stocknames %>%
  filter(exchcd == 1,
         substr(as.character(shrcd), 1L, 1L) == "1") %>%
  select(permno, namedt, nameenddt) 
```

```{r}
#| include: false
nyse_splits_raw <-
  splits %>%
  inner_join(nyse_stocks, by = "permno") %>%
  filter(dclrdt >= namedt, dclrdt <= nameenddt) 
```  

```{r}
nyse_splits_raw %>% count(split)
```
```{r}
nyse_splits %>% count(split)
```

```{r}
#| include: false
day_indexes <-
  dsi %>%
  mutate(day = as.Date(date_trunc('day', date))) %>%
  window_order(day) %>%
  mutate(day_index = row_number()) %>%
  select(date, day, day_index)

day_indexes %>%
  arrange(desc(day_index))
```
  
```{r nyse_splits}
#| include: false
nyse_splits <-
  nyse_splits_raw %>%
  mutate(day = as.Date(date_trunc('day', dclrdt))) %>%
  inner_join(day_indexes, by = "day") %>% 
#if we use inner_join, missing data but map could work, if we use left_join, no missing data but map does not work.#
  rename(ex_day_index = day_index) %>% 
  select(-namedt, -nameenddt, -date) %>%
  collect()
```

We construct `nyse_dsf`, which is essentially `crsp.dsf` restricted to NYSE stocks and months with non-missing returns, and with the added variable `day_index`.

```{r nyse_dsf}
#| include: false
nyse_dsf <-
  dsf %>%
  filter(!is.na(ret)) %>%
  inner_join(nyse_stocks, by = "permno") %>%
  filter(between(date, namedt, nameenddt)) %>%
  inner_join(day_indexes, by = "date") %>%
  select(permno, day_index, date, ret) %>%
  collect()
```

The following code merges data on splits from `nyse_splits` with data on returns from `nyse_dsf`.
We create a variable (`month_rel_ex`) that measures the number of months between the split and the return.

```{r}
#| include: false
split_return_data <-
  nyse_splits %>%
  left_join(nyse_dsf, by = "permno") %>%
  mutate(day_rel_ex = day_index - ex_day_index) %>%
  select(permno, dclrdt, date, ret, day_rel_ex)
```

```{r}
#| include: false
split_sample <-
  split_return_data %>%
  filter(between(day_rel_ex, -365, 365)) %>%
  group_by(permno, dclrdt) %>%
  summarize(n_obs = n(), .groups = "drop") %>%    #filter(n_obs == 731L) %>% 
  select(permno, dclrdt)

split_returns <-
  split_return_data %>%
  semi_join(split_sample, by = c("permno")) 
```

```{r}
#| include: false
split_sample %>% distinct(permno) %>% count()
split_sample %>% count()
```

```{r}
#| include: false
index_returns <-
  dsi %>%
  select(date, vwretd, ewretd) %>%
  collect()
```

```{r}
#| include: false
omit_returns <-
  split_returns %>%
  mutate(exclude = between(day_rel_ex, -450, 0)) %>%
  group_by(permno, date) %>%
  summarize(exclude = any(exclude), .groups = "drop")
```

```{r}
#| include: false
split_returns_reg <-
  split_returns %>%
  inner_join(omit_returns, by = c("permno", "date")) %>%
  select(permno, date, ret, exclude) %>%
  distinct() 
```

```{r}
#| include: false
abnormal_returns <-
  split_returns_reg %>%
  left_join(index_returns, by = "date") %>%
  mutate(lpr = log(1 + ret),
         lm = log(1 + vwretd)) %>%
  select(permno, date, lpr, lm, exclude) %>%
  nest(data = !permno) %>%
  mutate(fit = map(data, ~ lm(lpr ~ lm, data = ., subset = !exclude,
                              na.action = "na.exclude"))) %>%
  mutate(predicted = map2(fit, data, ~ predict(.x, newdata = .y))) %>%
  unnest(cols = c(predicted, data)) %>%
  mutate(resid = lpr - predicted) %>%
  select(permno, date, resid)
```

```{r}
#| include: false
table2_data <-
  abnormal_returns %>%
  inner_join(collect(day_indexes), by = "date") %>%
  left_join(nyse_splits, by = "permno") %>%
  mutate(day_gap = day_index - ex_day_index) %>%
  filter(abs(day_gap) <= 365)
```

```{r}
table2_data %>%
  group_by(day_gap) %>%
  summarize(all_u = mean(resid), .groups = "drop") %>%
  arrange(day_gap) %>%
  mutate(all_U = cumsum(all_u)) %>%
  ggplot(aes(x = day_gap, y = all_U)) +
  geom_point()
```
#aggregate splits against lagged market returns 
```{r}
last_split <- max(split_sample$dclrdt)

mkt_indx <-
  dsi %>%
  filter(date <= !!last_split) %>%
  collect() %>%
  arrange(date) %>%
  mutate(cumret = cumprod(1 + coalesce(ewretx,0)) * 100) %>%
  #filter(day(date) == 30) %>%
  mutate(month = month(date)) %>%
  select(month, cumret)

num_splits <-
  split_sample %>%
  mutate(month = month(dclrdt)) %>%
  group_by(month) %>%
  summarize(n_splits = n())

mkt_indx %>%
  left_join(num_splits, by = "month") %>%
  mutate(n_splits = coalesce(n_splits, 0)) %>%
  arrange(month) %>%
  mutate(ret = cumret/lag(cumret) - 1,
         lag_ret = lag(ret)) %>%
  filter(!is.na(lag_ret)) %>%
  ggplot(aes(y = n_splits, x = lag_ret)) +
  geom_point()
```
