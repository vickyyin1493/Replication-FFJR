Introduction

Overall, we attempted to replicate FFJR's study concerning stock splits, returns and dividends (will change wording later). However, we have implemented changes during our replication to utilise more recent data (from 1990 to 2022) and daily data which can be identified as extensions beyond the original FFJR study which used monthly data and the data ranged from 1926 to 1960. At the time, FFJR presented several theories that also provide a key foundation to our analysis and explanation of subsequent results. During our seminar on FFJR, it was divulged that the following theories were proposed and considered a spossible explanations to the graphs protrayed in FFJR. Specifically, the relevant theories initially explored were: 

**Theory A:** Firms like to keep their stock price within certain bounds. When the stock price rises above a certain threshold, a firm may initiate a split, announcing it several weeks in advance of its effective date.
**Theory B:** Firms use splits to signal private information about firm prospects. A firm will announce a split several weeks in advance of its effective date. 

Where Theory A represents the liquidity hypothesis where firms tend to  (add ref) and Theory B denotes the information signalling hypothesis where firms (add ref). FFJR primarily argues for Theory B within the paper, which aligns more closely with the information signalling hypothesis that firms will reveal information regarding the firm’s positive prospects to the market. However, the graph aligns more closely with Theory A, which denotes the liquidity hypothesis where management utilises stock splits to enhance their stock’s liquidity.  Hence, this shows that the liquidity hypothesis may have been more applicable to the market in 1926-1960. 

Notes to self: 
Need to properly reference
Add theories A' and B'' + explain

**Main replication of FFJR**

We begin by identifying the required libraries that will provide the appropriate functions in our FFJR replication. 
```{r}
#| include: false
#| echo: false
library(DBI)
library(dplyr, warn.conflicts = FALSE)
library(dbplyr)      # For window_order
library(tidyr)       # For nest and unnest
library(purrr)       # For map, map2
library(ggplot2)
library(lubridate)
library(farr)
```

We connect to the CRSP database which contains prices and returns on all NYSE common stocks which was the stock exchange utilised in FFJR. We load the appropriate tables which contain the relevant announcement dates, splits and unique firm identifiers (permno) required in our subsequent code. Particularly, we utilised data from dsi and dsf, which stand for daily stock index and daily stock file respectively, as we attempt to replicate FFJR by utilising daily data (also disclosed above). 

Notes to self: 
Explain dsedist
Create splits variable where we limited the data to the appropriate timeframe we are investigating, identified cases where there were splits 
Only obtained information pertaining to NYSE stocks by creating the nyse_stocks variable (exchcd == 1 limits to NYSE) 
Connected info for NYSE stocks to the splits variable via inner_join by the common identifier (mayber) "permno". 
```{r}
pg <- dbConnect(RPostgres::Postgres(), bigint = "integer")

rs <- dbExecute(pg, "SET search_path TO crsp")
dsi <- tbl(pg, "dsi")
dsf <- tbl(pg, "dsf")
stocknames <- tbl(pg, "stocknames")
dsedist <- tbl(pg, "dsedist")

splits <-
  dsedist %>%
  filter(dclrdt >= "1990-01-01", dclrdt <= "2022-12-31",
         distcd %in% c(5523L, 5533L),
         facshr >= 0.25) %>%
  mutate(split = TRUE) %>%
  select(permno, split, dclrdt, facshr) 

nyse_stocks <-
  stocknames %>%
  filter(exchcd == 1,
         substr(as.character(shrcd), 1L, 1L) == "1") %>%
  select(permno, namedt, nameenddt) 

nyse_splits_raw <-
  splits %>%
  inner_join(nyse_stocks, by = "permno") %>%
  filter(dclrdt >= namedt, dclrdt <= nameenddt) %>%
  collect() 
```
We now create the variable day_indexes which involves information from the daily stock index table... add more 

```{r}
#| include: false
day_indexes <-
  dsi %>%
  mutate(day = date) %>%
  window_order(day) %>%
  mutate(day_index = row_number()) %>%
  select(date, day, day_index) %>%
  collect() 

nyse_splits <-
  nyse_splits_raw %>%
  get_event_dates(pg, permno = "permno", event_date = "dclrdt") %>%
  inner_join(nyse_splits_raw, by = join_by(permno, dclrdt)) %>%
  select(-namedt, -nameenddt) %>%
  rename(day = start_date) %>%
  select(-end_date) %>%
  inner_join(day_indexes, by = "day") %>%  
  rename(ex_day_index = day_index) %>% 
  select(-date) %>%
  collect()
```
We now create the variable "nyse_dsf", which represents the daily stock file restricted to NYSE stocks filtered for days with non-missing returns, and we joined this with the previous day_indexes variable, by the "date" which is a common variable that the daily stock file and day_indexes have in common. 
```{r nyse_dsf}
#| include: false
nyse_dsf <-
  dsf %>%
  filter(!is.na(ret)) %>%
  inner_join(nyse_stocks, by = "permno") %>%
  filter(between(date, namedt, nameenddt)) %>%
  collect() %>%
  inner_join(day_indexes, by = "date") %>%
  select(permno, day_index, date, ret) 

split_return_data <-
  nyse_splits %>%
  left_join(nyse_dsf, by = "permno") %>%
  mutate(day_rel_ex = day_index - ex_day_index) %>%
  select(permno, dclrdt, date, ret, day_rel_ex) 

split_sample <-
  split_return_data %>%
  filter(between(day_rel_ex, -365, 365)) %>%
  group_by(permno, dclrdt) %>%
  summarize(n_obs = n(), .groups = "drop") %>% 
  select(permno, dclrdt)

split_returns <-
  split_return_data %>%
  semi_join(split_sample, by = c("permno")) 

split_sample %>% distinct(permno) %>% count()
split_sample %>% count()
```

```{r}
index_returns <-
  dsi %>%
  select(date, vwretd, ewretd) %>%
  collect()

omit_returns <-
  split_returns %>%
  mutate(exclude = between(day_rel_ex, -450, 0)) %>%
  group_by(permno, date) %>%
  summarize(exclude = any(exclude), .groups = "drop")

split_returns_reg <-
  split_returns %>%
  inner_join(omit_returns, by = c("permno", "date")) %>%
  select(permno, date, ret, exclude) %>%
  distinct() 
```

```{r}
#| include: false
abnormal_returns <-
  split_returns_reg %>%
  left_join(index_returns, by = "date") %>%
  mutate(lpr = log(1 + ret),
         lm = log(1 + vwretd)) %>%
  select(permno, date, lpr, lm, exclude) %>%
  nest(data = !permno) %>%
  mutate(fit = map(data, ~ lm(lpr ~ lm, data = ., subset = !exclude,
                              na.action = "na.exclude"))) %>%
  mutate(predicted = map2(fit, data, ~ predict(.x, newdata = .y))) %>%
  unnest(cols = c(predicted, data)) %>%
  mutate(resid = lpr - predicted) %>%
  select(permno, date, resid)
```
After calculating the abnormal returns according to FFJR's approach, we can now replicate an important aspect of the FFJR paper, which is essentially Figure 2b. However, a difference between the graph below and FFJR's Figure 2b is that this figure outlines the relationship between the cumulative average residuals of all splits but primarily focused on the announcement date instead of the effective date. Additionally, the x-axis is in terms of "days" in our replication which is more specific than FFJR's months approach due to the lack of computational abilities at the time. 

Nonetheless, regarding the figure itself, we continue to observe a similar pattern to FFJR's Figure 2b despite the different nature of the dates investigated. Specifically, 

In consequence, it can still be deemed that Theory A is the theory that is consistent with the graph pattern observed. 
```{r}
table2_data <-
  abnormal_returns %>%
  inner_join(collect(day_indexes), by = "date") %>%
  left_join(nyse_splits, by = "permno") %>%
  mutate(day_gap = day_index - ex_day_index) %>%
  filter(abs(day_gap) <= 365)

table2_data %>%
  group_by(day_gap) %>%
  summarize(all_u = mean(resid), .groups = "drop") %>%
  arrange(day_gap) %>%
  mutate(all_U = cumsum(all_u)) %>%
  ggplot(aes(x = day_gap, y = all_U)) +
  geom_point()
```

Theory B suggests that firms use stock splits to signal dividend announcements which in turn signals future prospects. There are two components in this theory, one is that stock splits signals dividends and another one is that dividends signal future prospects.
Both components act together and implicitly suggests that the market, being aware of firms' signaling rationales, will be expecting dividends after split announcements.  

In this part of the replication, we tried to observe market reactions for the firms that announced stock splits. By differentiating the firms that had 'dividend increases' and 'dividend decreases' post split announcements, we attempt to evaluate theory B through whether market participants would react differently when firms' decisions align/misalign with their expectations. 

Assuming theory B holds, then the market should react positively when splits are first announced and will not subsequently react for firms that announced dividend increases and react negatively for firms that announced dividend decreases. This is due to the market's expectation that firms announced stock splits will announce dividend increases, and when their expectation are not being met, they would react through negative returns.

As firms could announce dividends multiple times per day (although it might be highly unlikely), we followed the approach in the textbook and calculated daily dividend amounts. We then selected NYSE stocks for our purpose of the analysis. 

In order to calculate 

```{r}
#| include: false
div_days <-
  dsedist %>%
  filter(substr(as.character(distcd), 1L, 1L) == "1") %>%
  mutate(day =  dclrdt) %>%
  group_by(permno, day) %>%
  summarize(divamt = sum(divamt, na.rm = TRUE), .groups = "drop")

nyse_divs_raw <-
  dsf %>%
  inner_join(nyse_stocks, by = "permno") %>%
  filter(between(date, namedt, nameenddt)) %>%
  mutate(day =  date) %>%
  select(permno, date, day, cfacshr) %>%
  left_join(div_days, by = c("permno", "day")) %>%
  mutate(divamt = coalesce(divamt/cfacshr, 0)) %>%
  select(permno, day, divamt)

nyse_divs <-
  nyse_divs_raw %>%
  group_by(permno) %>%
  window_order(day) %>%
  window_frame(from = -364, to = 0) %>%
  mutate(div_trailing = sum(divamt, na.rm = TRUE),
         days_trailing = sum(1, na.rm = TRUE)) %>%
  window_frame(from = 1, to = 365) %>%
  mutate(div_forward = sum(divamt, na.rm = TRUE),
         days_forward = sum(1, na.rm = TRUE)) %>%
  filter(days_trailing == 365, days_forward == 365) %>% #!!!
  ungroup() %>%
  select(permno, day, div_trailing, div_forward) %>%
  collect()
```

```{r}
#investigate distribution for days_forward
nyse_divs_raw %>%
  group_by(permno) %>%
  window_order(day) %>%
  window_frame(from = -364, to = 0) %>%
  mutate(div_trailing = sum(divamt, na.rm = TRUE),
         days_trailing = sum(1, na.rm = TRUE)) %>%
  window_frame(from = 1, to = 365) %>%
  mutate(div_forward = sum(divamt, na.rm = TRUE),
         days_forward = sum(1, na.rm = TRUE)) %>%
  ggplot(aes(days_forward)) +
  geom_histogram() 
```
```{r}
#investigate distribution for days_trailing
nyse_divs_raw %>%
  group_by(permno) %>%
  window_order(day) %>%
  window_frame(from = -364, to = 0) %>%
  mutate(div_trailing = sum(divamt, na.rm = TRUE),
         days_trailing = sum(1, na.rm = TRUE)) %>%
  window_frame(from = 1, to = 365) %>%
  mutate(div_forward = sum(divamt, na.rm = TRUE),
         days_forward = sum(1, na.rm = TRUE)) %>%
  ggplot(aes(days_trailing)) +
  geom_histogram()
```

```{r}
nyse_divs <-
  nyse_divs_raw %>%
  group_by(permno) %>%
  window_order(day) %>%
  window_frame(from = -364, to = 0) %>%
  mutate(div_trailing = sum(divamt, na.rm = TRUE),
         days_trailing = sum(1, na.rm = TRUE)) %>%
  window_frame(from = 1, to = 365) %>%
  mutate(div_forward = sum(divamt, na.rm = TRUE),
         days_forward = sum(1, na.rm = TRUE)) %>%
  ungroup() %>%
  select(permno, day, div_trailing, div_forward) %>%
  collect()
```

```{r split_firm_dividends}
#| include: false
split_firm_dividends <-
  nyse_splits %>% #day here is the same as dclrdt
  full_join(nyse_divs, by = c("permno", "day")) %>% #day here is dividend date
  mutate(div_ratio = if_else(div_trailing > 0, div_forward/div_trailing,
                             NA_real_)) %>%
  filter(!is.na(div_ratio)) %>%
  select(permno, day, div_ratio) 
```

```{r}
#| include: false
div_mkt <- #day here is dividend date
  nyse_divs %>% 
  group_by(day) %>% 
  summarize(div_trailing = mean(div_trailing, na.rm = TRUE),
            div_forward = mean(div_forward, na.rm = TRUE),
            .groups = "drop") %>%
  mutate(mkt_div_ratio = if_else(div_trailing > 0, div_forward/div_trailing,
                                 NA_real_))

dividends_file <-
  split_firm_dividends %>% #day here is the same as dclrdt
  inner_join(div_mkt, by = "day") %>%  #day here is dividend date
  select(permno, day, div_ratio, mkt_div_ratio) %>% 
  mutate(up_div = div_ratio >= mkt_div_ratio)
```

```{r}
#| include: false
table2_w_divs <- 
  table2_data %>%
  rename(day = day.x) %>%
  left_join(dividends_file, by = c("permno", "day"))
```

```{r}
table2_w_divs %>%
  filter(up_div) %>%
  group_by(day_gap) %>%
  summarize(u = mean(resid), .groups = "drop") %>%
  arrange(day_gap) %>%
  mutate(U = cumsum(u)) %>%
  ggplot(aes(x = day_gap, y = U)) +
  geom_point()
```

```{r}
table2_w_divs %>%
  filter(!up_div) %>%
  group_by(day_gap) %>%
  summarize(u = mean(resid), .groups = "drop") %>%
  arrange(day_gap) %>%
  mutate(U = cumsum(u)) %>%
  ggplot(aes(x = day_gap, y = U)) +
  geom_point()
```

```{r}
table2_w_divs %>%
  filter(!is.na(up_div)) %>%
  count(up_div)
```
